version: '3.8'
services:


  # 필요 디렉토리 생성 - 해당노드는 생성 후 command 작업이 끝나면 down 상태로 변경 됨
  make-directory:
    image: ubuntu:latest

    volumes:
      - type: bind
        source: ./
        target: /usr/share/
    command: sh -c "mkdir -p /usr/share/data1 /usr/share/logs1 /usr/share/data2 /usr/share/logs2"


  #인증서 생성 service 실행 - 해당노드는 생성 후 command 작업이 끝나면 down 상태로 변경 됨
  create_certs:
    #elastic module을 활용하여 인증서 생성이 진행됨에 따라 elasticsearch 이미지를 사용
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.2
    #인증서 생성 모듈을 실행하는 bash command line
    command: >
      bash -c '
        yum install -y -q -e 0 unzip;
        if [[ ! -f /certs/bundle.zip ]]; then
          bin/elasticsearch-certutil cert --silent --pem --in config/certificates/instances.yml -out /certs/bundle.zip;
          unzip /certs/bundle.zip -d /certs;
        fi;
        chown -R 1000:0 /certs
      '
    #작업이 진행되는 container 내부의 디렉토리 주소  
    working_dir: /usr/share/elasticsearch
    #volume mount를 통해 생성된 인증서를 docker volume에 저장하고 다른 node들이 사용
    volumes:
      - certs:/certs
      #- ../../../config/cluster/same_host_os/_ca:/certs
      - ../../../config/cluster/same_host_os/_ca:/usr/share/elasticsearch/config/certificates
    #브릿지 네트워크를 통한 cluster 내부통신 진행      
    networks:
      - eknetwork



# elasticsearch master node container 생성  
  master:
    #사용되는 elasticsearch image 
    image: docker.elastic.co/elasticsearch/elasticsearch:8.3.3
    #container
    container_name: master
    ulimits:
      memlock:
        soft: -1
        hard: -1
    #container port 설정     
    ports:
      - 9350:9350
    #volume path 설정  
    volumes: 
      # elasticsearch.yml 파일과 jvm.option 파일을 bind 마운트
      - ../../../config/cluster/same_host_os/_master/master.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ../../../config/cluster/same_host_os/_master/jvm.options:/usr/share/elasticsearch/config/jvm.options
      # docker volume을 통해 config 정보 유지를 위해 named 마운트
      - master_config1:/usr/share/elasticsearch/config
      - master_plugin1:/usr/share/elasticsearch/plugins
      # 'create_certs' 컨테이너를 통해 생성한 인증서 정보를 전달 받기위한 naemd 마운트
      - certs:/usr/share/elasticsearch/config/certificates     
    #container 내부 통신을 위한 브릿지 네트워크 생성   
    networks:
      - eknetwork
    #정상적으로 인증서 생성 후 설정이 완료 되었는지 확인하는 구간
    #"esmaster02" 노드는 해당 내용 skip
    healthcheck:
      test: curl --cacert /usr/share/elasticsearch/config/certificates/ca/ca.crt -s https://localhost:9350 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5
    # 'create_certs' service 작업이 완료 후 해당 container 생성  
    depends_on:
      - create_certs       



  data1:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.3.3
    container_name: data1
    ulimits:
        memlock:
          soft: -1
          hard: -1
    networks:
      - eknetwork
    volumes: 
      # elasticsearch.yml 파일과 jvm.option 파일을 bind 마운트
      - ../../../config/cluster/same_host_os/_data/data1.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ../../../config/cluster/same_host_os/_data/jvm.options:/usr/share/elasticsearch/config/jvm.options
      # docker volume을 통해 config 정보 유지를 위해 named 마운트
      - data_config1:/usr/share/elasticsearch/config 
      - data_plugin2:/usr/share/elasticsearch/plugins 
      # data 파일과 log 파일 호스트 볼륨에 저장하기위해 bind 마운트
      - ./data1:/usr/share/elasticsearch/data
      # - ./logs1:/usr/share/elasticsearch/logs
      # 'create_certs' 컨테이너를 통해 생성한 인증서 정보를 전달 받기위한 naemd 마운트
      - certs:/usr/share/elasticsearch/config/certificates           
    ports:
      - 8350:8350
    depends_on:
      - create_certs  


  data2:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.3.3
    container_name: data2
    ulimits:
        memlock:
          soft: -1
          hard: -1
    networks:
      - eknetwork
    volumes: 
      # elasticsearch.yml 파일과 jvm.option 파일을 bind 마운트
      - ../../../config/cluster/same_host_os/_data/data2.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ../../../config/cluster/same_host_os/_data/jvm.options:/usr/share/elasticsearch/config/jvm.options
      # docker volume을 통해 config 정보 유지를 위해 named 마운트
      - data_config2:/usr/share/elasticsearch/config 
      - data_plugin2:/usr/share/elasticsearch/plugins 
      # data 파일과 log 파일 호스트 볼륨에 저장하기위해 bind 마운트
      # - ./data2:/usr/share/elasticsearch/data
      # - ./logs2:/usr/share/elasticsearch/logs
      # 'create_certs' 컨테이너를 통해 생성한 인증서 정보를 전달 받기위한 naemd 마운트
      - certs:/usr/share/elasticsearch/config/certificates           
    ports:
      - 7350:7350
    depends_on:
      - create_certs  
  
  kibana:
    image: docker.elastic.co/kibana/kibana:8.3.3
    #conatiner 이름
    container_name: kibana
    #'master' container의 healthcheck가 완료 후 condition의 대한 정보가 'service_healthy' 알 때  해당 노드 생성
    depends_on: {"master": {"condition": "service_healthy"}}
    networks:
      - eknetwork
    #container port 설정
    ports:
      - 5601:5601
    volumes:
      - ../../../config/cluster/same_host_os/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
      - certs:/usr/share/kibana/config/certificates

#Host volume의 실제 위치 local 일경우 
volumes:
  master_config1:
    driver: local
  master_plugin1:
    driver: local
  data_config1:
    driver: local
  data_config2:
    driver: local
  data_plugin1:
    driver: local
  data_plugin2:
    driver: local
  kibana:
    driver: local
  #인증서 생성 후 생성된 인증서를 volume에 mount
  certs:
    driver: local


#container 내부통신으로 사용하기 위한 브릿지 네트워크 생성
networks:
  eknetwork:
    #network이름
    name: test-eknetwork 
    #container 내부끼리의 통신을 지원여부에 대한 설정
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"    